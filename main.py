from flask import Flask
import os
import threading
import time
import requests
import datetime
import logging
from telebot import TeleBot, types
from threading import Timer
import psycopg2
from psycopg2.extras import RealDictCursor
import urllib.parse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8290372805:AAGwVsrTZYXgZYOGWWB_Eq9DtlNC6KkAGto"
DEVELOPER_LINK = "https://t.me/Retur8827"
bot = TeleBot(BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TIME_SLOTS = [
    "08:00-09:00", "09:00-10:00", "10:00-11:00", "11:00-12:00",
    "16:00-17:00", "17:00-18:00", "18:00-19:00", "19:00-20:00",
    "20:00-21:00", "21:00-22:00", "22:00-23:00"
]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
DATABASE_URL = os.environ.get('DATABASE_URL', 'postgresql://laundry_bot_user:V4GTJFTttRgG6C87DBb1BHpltszTSaBm@dpg-d348jbfdiees739lol9g-a/laundry_bot')

# –ü–∞—Ä—Å–∏–Ω–≥ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
result = urllib.parse.urlparse(DATABASE_URL)
db_config = {
    'dbname': result.path[1:],
    'user': result.username,
    'password': result.password,
    'host': result.hostname,
    'port': result.port
}

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    return "–ü—É—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!!"

@app.route('/health')
def health_check():
    return "OK", 200

@app.route('/keepalive')
def keep_alive():
    return "Server is alive", 200

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
def get_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
    try:
        conn = psycopg2.connect(**db_config)
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
    try:
        conn = get_connection()
        if conn:
            cursor = conn.cursor()
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS bookings (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                date TEXT,
                time_slot TEXT,
                full_name TEXT,
                room_number TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''')
            conn.commit()
            cursor.close()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def cleanup_old_records():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        today = datetime.datetime.now().strftime("%d-%m-%Y")
        conn = get_connection()
        if conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM bookings WHERE date < %s", (today,))
            conn.commit()
            cursor.close()
            conn.close()
            logger.info("–°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–ø–∏—Å–µ–π: {e}")

def schedule_daily_cleanup():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    now = datetime.datetime.now()
    next_midnight = now.replace(hour=0, minute=0, second=0, microsecond=0) + datetime.timedelta(days=1)
    seconds_until_midnight = (next_midnight - now).total_seconds()
    Timer(seconds_until_midnight, daily_cleanup_task).start()

def daily_cleanup_task():
    """–ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    cleanup_old_records()
    schedule_daily_cleanup()

def get_booked_slots(date):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    try:
        conn = get_connection()
        if conn:
            cursor = conn.cursor()
            cursor.execute("SELECT time_slot FROM bookings WHERE date = %s", (date,))
            booked_slots = [row[0] for row in cursor.fetchall()]
            cursor.close()
            conn.close()
            return booked_slots
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
def main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    today_btn = types.KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è")
    tomorrow_btn = types.KeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞")
    developer_btn = types.KeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
    cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
    markup.add(today_btn, tomorrow_btn, developer_btn, cancel_btn)
    return markup

def cancel_menu():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
    markup.add(cancel_btn)
    return markup

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç–∏—Ä–∫—É!\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n\n"
        "- —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—Ä–Ω–æ–µ –§–ò–û (–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã)\n\n"
        "- —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã\n\n"
        "- –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –æ–±—Ä–∞–∑–æ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏\n\n"
        "–ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –≤–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ —è –≤–∏–∂—É, –∫—Ç–æ –∏ –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫–∏\n\n"
        "–ü–†–û–î–û–õ–ñ–ê–Ø –†–ê–ë–û–¢–£ –° –ë–û–¢–û–ú, –í–´ –î–ê–Å–¢–ï –°–û–ì–õ–ê–°–ò–ï –ù–ê –û–ë–†–ê–ë–û–¢–ö–£ –í–í–ï–î–Å–ù–ù–´–• –í–ê–ú–ò –î–ê–ù–ù–´–•\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    try:
        if message.text == "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫":
            bot.send_message(
                message.chat.id,
                f"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: {DEVELOPER_LINK}",
                reply_markup=main_menu()
            )

        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
            cancel_booking(message)

        elif message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            show_time_slots(message, 0)

        elif message.text == "üìÜ –ó–∞–≤—Ç—Ä–∞":
            show_time_slots(message, 1)

        else:
            conn = get_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM bookings WHERE user_id = %s AND full_name IS NULL", (message.from_user.id,))
                booking = cursor.fetchone()
                cursor.close()
                conn.close()

                if booking:
                    process_booking_data(message, booking)
                else:
                    conn = get_connection()
                    if conn:
                        cursor = conn.cursor()
                        cursor.execute("""
                            SELECT id, full_name, room_number 
                            FROM bookings 
                            WHERE user_id = %s AND (full_name IS NULL OR room_number IS NULL)
                        """, (message.from_user.id,))
                        booking = cursor.fetchone()
                        cursor.close()
                        conn.close()

                        logger.info(f"Active booking found: {booking}")

                        if booking:
                            process_booking_data(message, booking)
                        else:
                            bot.send_message(
                                message.chat.id,
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
                                reply_markup=main_menu()
                            )
                    else:
                        bot.send_message(
                            message.chat.id,
                            "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                            reply_markup=main_menu()
                        )
            else:
                bot.send_message(
                    message.chat.id,
                    "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    reply_markup=main_menu()
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_time_slots(message, days_offset):
    target_date = (datetime.datetime.now() + datetime.timedelta(days=days_offset)).strftime("%d-%m-%Y")
    booked_slots = get_booked_slots(target_date)
    markup = types.InlineKeyboardMarkup()

    for slot in TIME_SLOTS:
        if slot not in booked_slots:
            btn = types.InlineKeyboardButton(
                f"‚úÖ {slot}",
                callback_data=f"slot_{target_date}_{slot}"
            )
            markup.add(btn)

    if not markup.keyboard:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã.",
            reply_markup=main_menu()
        )
    else:
        day_name = "—Å–µ–≥–æ–¥–Ω—è" if days_offset == 0 else "–∑–∞–≤—Ç—Ä–∞"
        bot.send_message(
            message.chat.id,
            f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∏—Ä–∫–∏ ({day_name} {target_date}):",
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        if call.data.startswith("slot_"):
            _, date, time_slot = call.data.split("_", 2)
            conn = get_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO bookings (user_id, username, first_name, last_name, date, time_slot) VALUES (%s, %s, %s, %s, %s, %s)",
                    (call.from_user.id, call.from_user.username, call.from_user.first_name,
                     call.from_user.last_name, date, time_slot)
                )
                conn.commit()
                cursor.close()
                conn.close()

                bot.send_message(
                    call.message.chat.id,
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
                    reply_markup=types.ReplyKeyboardRemove()
                )

                bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∏—Ä–∫–∏")
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def process_booking_data(message, booking):
    conn = get_connection()
    if not conn:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        cursor = conn.cursor()
        cursor.execute("SELECT full_name, room_number FROM bookings WHERE id = %s", (booking[0],))
        current_data = cursor.fetchone()

        logger.info(f"Booking ID: {booking[0]}, Current data: {current_data}, Message text: '{message.text}'")

        if current_data[0] is None:
            cursor.execute(
                "UPDATE bookings SET full_name = %s WHERE id = %s",
                (message.text, booking[0])
            )
            conn.commit()

            bot.send_message(
                message.chat.id,
                "üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:"
            )

        elif current_data[1] is None and len(message.text) == 3:
            if message.text[0] in "1234567890" and message.text[1] in "1234567890" and message.text[2] in "1234567890":
                cursor.execute(
                    "UPDATE bookings SET room_number = %s WHERE id = %s",
                    (message.text, booking[0])
                )
                conn.commit()

                cursor.execute("SELECT date, time_slot, full_name, room_number FROM bookings WHERE id = %s",
                               (booking[0],))
                updated_data = cursor.fetchone()

                logger.info(f"Updated data: {updated_data}")

                if updated_data:
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        f"üìÖ –î–∞—Ç–∞: {updated_data[0]}\n"
                        f"üïê –í—Ä–µ–º—è: {updated_data[1]}\n"
                        f"üë§ –§–ò–û: {updated_data[2]}\n"
                        f"üè† –ö–æ–º–Ω–∞—Ç–∞: {updated_data[3]}",
                        reply_markup=cancel_menu()
                    )
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏",
                        reply_markup=main_menu()
                    )
            else:
                cursor.execute("DELETE FROM bookings WHERE id = %s", (booking[0],))
                conn.commit()

                bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã",
                    reply_markup=main_menu()
                )
        else:
            cursor.execute("DELETE FROM bookings WHERE id = %s", (booking[0],))
            conn.commit()

            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã",
                reply_markup=main_menu()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    finally:
        cursor.close()
        conn.close()

def cancel_booking(message):
    try:
        conn = get_connection()
        if conn:
            cursor = conn.cursor()
            cursor.execute(
                "DELETE FROM bookings WHERE user_id = %s",
                (message.from_user.id,)
            )
            conn.commit()
            cursor.close()
            conn.close()

            bot.send_message(
                message.chat.id,
                "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=main_menu()
            )
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
def ping_self():
    """–ü–∏–Ω–≥ —Å–∞–º–æ–≥–æ —Å–µ–±—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            base_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://localhost:4000')
            response = requests.get(f'{base_url}/keepalive', timeout=10)
            print(f"Self-ping successful: {response.status_code}")
        except Exception as e:
            print(f"Self-ping failed: {e}")
        time.sleep(10)  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()

def start_flask_server():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get('PORT', 4000))
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    )

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    schedule_daily_cleanup()

    # –ó–∞–ø—É—Å–∫ keep-alive –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    threading.Thread(target=ping_self, daemon=True).start()

    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=start_flask_server, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_bot()
